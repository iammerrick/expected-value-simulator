// Generated by BUCKLESCRIPT VERSION 2.2.3, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var ExpectedValueContainer$ReactTemplate = require("./ExpectedValueContainer.bs.js");

function toPercent(n) {
  var match = +isNaN(n);
  return (
            match !== 0 ? 0 : n
          ).toLocaleString("en", ({"style": "percent"}));
}

var successColor = "#BEDB39";

var failureColor = "#FD7400";

var component = ReasonReact.statelessComponent("Title");

function make(name, _) {
  var newrecord = component.slice();
  newrecord[/* render */9] = (function () {
      return React.createElement("div", {
                  style: {
                    fontSize: "5em",
                    fontWeight: "bold",
                    padding: "0 8px",
                    textTransform: "uppercase"
                  }
                }, name);
    });
  return newrecord;
}

var Title = /* module */[
  /* component */component,
  /* make */make
];

var component$1 = ReasonReact.statelessComponent("SimulationAttributeDetail");

function make$1(children) {
  var newrecord = component$1.slice();
  newrecord[/* render */9] = (function () {
      return ReasonReact.createDomElement("div", {
                  style: {
                    borderBottom: "1px solid rgba(255,255,255,0.6)",
                    padding: "16px 8px"
                  }
                }, children);
    });
  return newrecord;
}

var SimulationAttributeDetail = /* module */[
  /* component */component$1,
  /* make */make$1
];

var component$2 = ReasonReact.statelessComponent("SimulationTitle");

function make$2(title, _) {
  var newrecord = component$2.slice();
  newrecord[/* render */9] = (function () {
      return React.createElement("div", {
                  style: {
                    color: "rgba(255,255,255,0.6)",
                    fontSize: "0.8em",
                    fontWeight: "bold",
                    textTransform: "uppercase"
                  }
                }, title);
    });
  return newrecord;
}

var SimulationTitle = /* module */[
  /* component */component$2,
  /* make */make$2
];

var component$3 = ReasonReact.statelessComponent("SimulationValue");

function make$3(value, _) {
  var newrecord = component$3.slice();
  newrecord[/* render */9] = (function () {
      return React.createElement("div", {
                  style: {
                    color: "#004358",
                    fontSize: "4em",
                    textShadow: "-1px -1px 0 #FFF, 1px -1px 0 #FFF, -1px 1px 0 #FFF, 1px 1px 0 #FFF"
                  }
                }, value);
    });
  return newrecord;
}

var SimulationValue = /* module */[
  /* component */component$3,
  /* make */make$3
];

var component$4 = ReasonReact.statelessComponent("SimulationDetails");

function make$4(probability, successes, failures, _) {
  var newrecord = component$4.slice();
  newrecord[/* render */9] = (function () {
      var probabilityAsString = toPercent(probability);
      var expectedSuccess = Math.round(probability * (successes + failures | 0));
      var expectedFailure = Math.round((1 - probability) * (successes + failures | 0));
      return React.createElement("div", undefined, ReasonReact.element(/* None */0, /* None */0, make$1(/* array */[
                          ReasonReact.element(/* None */0, /* None */0, make$2("Success Probability - Expected " + (String(probabilityAsString) + ""), /* array */[])),
                          ReasonReact.element(/* None */0, /* None */0, make$3(toPercent(successes / (failures + successes | 0)), /* array */[]))
                        ])), ReasonReact.element(/* None */0, /* None */0, make$1(/* array */[
                          ReasonReact.element(/* None */0, /* None */0, make$2("Successful Events - Expected " + (String(expectedSuccess) + ""), /* array */[])),
                          ReasonReact.element(/* None */0, /* None */0, make$3(React.createElement("span", {
                                        style: {
                                          textShadow: " -1px -1px 0 " + (String(successColor) + (", 1px -1px 0 " + (String(successColor) + (", -1px 1px 0 " + (String(successColor) + (", 1px 1px 0 " + (String(successColor) + " ")))))))
                                        }
                                      }, String(successes)), /* array */[]))
                        ])), ReasonReact.element(/* None */0, /* None */0, make$1(/* array */[
                          ReasonReact.element(/* None */0, /* None */0, make$2("Failed Events - Expected " + (String(expectedFailure) + ""), /* array */[])),
                          ReasonReact.element(/* None */0, /* None */0, make$3(React.createElement("span", {
                                        style: {
                                          textShadow: " -1px -1px 0 " + (String(failureColor) + (", 1px -1px 0 " + (String(failureColor) + (", -1px 1px 0 " + (String(failureColor) + (", 1px 1px 0 " + (String(failureColor) + " ")))))))
                                        }
                                      }, String(failures)), /* array */[]))
                        ])));
    });
  return newrecord;
}

var SimulationDetails = /* module */[
  /* SimulationTitle */SimulationTitle,
  /* SimulationValue */SimulationValue,
  /* component */component$4,
  /* make */make$4
];

var component$5 = ReasonReact.statelessComponent("SimulationEvent");

function make$5($$event, _) {
  var newrecord = component$5.slice();
  newrecord[/* render */9] = (function () {
      return React.createElement("div", {
                  style: {
                    backgroundColor: $$event !== 0 ? successColor : failureColor,
                    display: "inline-block",
                    height: "16px",
                    margin: "4px",
                    width: "16px"
                  }
                });
    });
  return newrecord;
}

var SimulationEvent = /* module */[
  /* component */component$5,
  /* make */make$5
];

var component$6 = ReasonReact.statelessComponent("SimulationEventView");

function make$6(events, _) {
  var newrecord = component$6.slice();
  newrecord[/* render */9] = (function () {
      return React.createElement("div", undefined, $$Array.of_list(List.mapi((function (key, $$event) {
                            return ReasonReact.element(/* Some */[String(key)], /* None */0, make$5($$event, /* array */[]));
                          }), events)));
    });
  return newrecord;
}

var SimulationEventView = /* module */[
  /* component */component$6,
  /* make */make$6
];

var component$7 = ReasonReact.reducerComponent("ExpectedValue");

function make$7(name, probability, _) {
  var newrecord = component$7.slice();
  newrecord[/* render */9] = (function (self) {
      var simulation = List.fold_left((function (memo, $$event) {
              if ($$event !== 0) {
                return /* record */[
                        /* successes */memo[/* successes */0] + 1 | 0,
                        /* failures */memo[/* failures */1]
                      ];
              } else {
                return /* record */[
                        /* successes */memo[/* successes */0],
                        /* failures */memo[/* failures */1] + 1 | 0
                      ];
              }
            }), /* record */[
            /* successes */0,
            /* failures */0
          ], self[/* state */2][/* events */0]);
      return ReasonReact.element(/* None */0, /* None */0, ExpectedValueContainer$ReactTemplate.make(ReasonReact.element(/* None */0, /* None */0, make(name, /* array */[])), ReasonReact.element(/* None */0, /* None */0, make$4(probability, simulation[/* successes */0], simulation[/* failures */1], /* array */[])), ReasonReact.element(/* None */0, /* None */0, make$6(self[/* state */2][/* events */0], /* array */[])), /* array */[]));
    });
  newrecord[/* initialState */10] = (function () {
      return /* record */[/* events : [] */0];
    });
  newrecord[/* reducer */12] = (function (_, state) {
      return /* Update */Block.__(0, [/* record */[/* events */List.append(state[/* events */0], /* :: */[
                        +(Math.random() < probability),
                        /* [] */0
                      ])]]);
    });
  newrecord[/* subscriptions */13] = (function (self) {
      return /* :: */[
              /* Sub */[
                (function () {
                    return setInterval((function () {
                                  return Curry._1(self[/* send */4], /* Tick */0);
                                }), 500);
                  }),
                (function (prim) {
                    clearInterval(prim);
                    return /* () */0;
                  })
              ],
              /* [] */0
            ];
    });
  return newrecord;
}

exports.toPercent = toPercent;
exports.successColor = successColor;
exports.failureColor = failureColor;
exports.Title = Title;
exports.SimulationAttributeDetail = SimulationAttributeDetail;
exports.SimulationDetails = SimulationDetails;
exports.SimulationEvent = SimulationEvent;
exports.SimulationEventView = SimulationEventView;
exports.component = component$7;
exports.make = make$7;
/* component Not a pure module */
